Развертывание Symfony 6.4 с Docker на Windows 10
Вот полная конфигурация для развертывания Symfony 6.4 с Nginx, PHP 8.2, Composer, Xdebug и PostgreSQL.

1. Структура проекта
Сначала создайте следующую структуру папок:

Copy
your_project/
├── docker/
│   ├── nginx/
│   │   └── default.conf
│   ├── php/
│   │   └── php.ini
│   └── xdebug/
│       └── xdebug.ini
├── Dockerfile
├── docker-compose.yml
└── .env
2. Dockerfile
Создайте Dockerfile в корне проекта:

dockerfile
Copy
# Устанавливаем базовый образ PHP с FPM
FROM php:8.2-fpm

# Устанавливаем зависимости
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    libpq-dev \
    && docker-php-ext-install pdo pdo_pgsql mbstring exif pcntl bcmath gd

# Устанавливаем Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Устанавливаем Xdebug
RUN pecl install xdebug \
    && docker-php-ext-enable xdebug

# Создаем рабочую директорию
WORKDIR /var/www

# Копируем конфигурацию PHP и Xdebug
COPY docker/php/php.ini /usr/local/etc/php/conf.d/custom.ini
COPY docker/xdebug/xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini

# Меняем права для пользователя www-data
RUN chown -R www-data:www-data /var/www
USER www-data
3. docker-compose.yml
Создайте docker-compose.yml в корне проекта:

yaml
Copy
version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./:/var/www
    environment:
      - XDEBUG_MODE=develop,debug
      - XDEBUG_CONFIG=client_host=host.docker.internal
    depends_on:
      - db

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app

  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

volumes:
  postgres_data:
4. Конфигурационные файлы
docker/nginx/default.conf
nginx
Copy
server {
    listen 80;
    index index.php index.html;
    server_name localhost;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /var/www/public;

    location / {
        try_files $uri /index.php$is_args$args;
    }

    location ~ ^/index\.php(/|$) {
        fastcgi_pass app:9000;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        internal;
    }

    location ~ \.php$ {
        return 404;
    }
}
docker/php/php.ini
ini
Copy
memory_limit = 256M
upload_max_filesize = 64M
post_max_size = 64M
docker/xdebug/xdebug.ini
ini
Copy
zend_extension=xdebug
xdebug.mode=develop,debug
xdebug.start_with_request=yes
xdebug.client_port=9003
xdebug.client_host=host.docker.internal
xdebug.idekey=PHPSTORM
xdebug.log=/var/www/xdebug.log
5. .env файл
Создайте .env файл в корне проекта:

ini
Copy
# Database
DB_NAME=symfony
DB_USER=postgres
DB_PASSWORD=password


6. Инструкции по запуску
Создайте новый проект Symfony (если у вас его еще нет):
docker run --rm -v $(pwd):/app composer create-project symfony/skeleton:"6.4.*" .

Запустите контейнеры:
docker-compose up -d --build

Установите зависимости Symfony:
docker-compose exec app composer install

Настройте параметры базы данных в .env файле Symfony:
ini
DATABASE_URL="postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}?serverVersion=15&charset=utf8"

Создайте базу данных (если нужно):
docker-compose exec app php bin/console doctrine:database:create

Настройка Xdebug для PHPStorm
В PHPStorm: File > Settings > PHP > Servers

Добавьте новый сервер:

Name: Docker

Host: localhost

Port: 80

Debugger: Xdebug

Use path mappings: Да

Сопоставьте путь проекта с /var/www

В PHPStorm: Run > Edit Configurations

Добавьте новую конфигурацию PHP Remote Debug

Server: Docker

IDE key: PHPSTORM

Теперь у вас должна быть работающая среда Symfony 6.4 с Nginx, PHP 8.2, Composer, Xdebug и PostgreSQL на Windows 10.